Instructions for Poloka developers using autotools
==================================================

Quick setup instructions
========================
  
  0. Select a directory $DIR to install all libraries and execs:
     $DIR/lib $DIR/share $DIR/bin etc...
     
   $ export DIR=$HOME
   $ export PKG_CONFIG_PATH="${DIR}/lib/pkgconfig:${PKG_CONFIG_PATH}"
   $ export PATH="${DIR}/bin:${PATH}"
   $ export LD_LIBRARY_PATH="${DIR}/lib:${LD_LIBRARY_PATH}"

    (adapt to setenv if you are still using the obsolete tcsh)
 
  1. Install libsex

   $ wget http://astrowww.phys.uvic.ca/~seb/poloka/libsex-2.4.4.3.tar.gz
   $ tar xf libsex-2.4.4.3.tar.gz && cd libsex-2.4.4.3
   $ ./configure --prefix=${DIR}
   $ make -j <ncpu> ; make install

 2. Install cfitsio

   $ wget http://dev.gentoo.org/~bicatali/distfiles/cfitsio-3.310.tar.gz
   $ tar xf cfitsio-3.310.tar.gz && cd cfitsio-3.310
   $ ./configure --prefix=${DIR} --disable-static
   $ make -j <ncpu> ; make install

 3. Install poloka

 If you are checking out from the git repository: 
   $ git clone snova1.in2p3.fr:/home/frogshome/git/poloka 
   $ autoreconf -i
   $ ./configure \
     	--prefix=$DIR \
     	CXXFLAGS="your C++ flags" FFLAGS="your C flags" \
     	F77="your F77 compiler" FC="your F77/F90 compiler"
   $ make -j <ncpu>
   $ make install

Some developer information for using autotools
==============================================

* Adding a new file: just edit the Makefile.am in the same
  directory. You do not need to reconfigure.

* All the Makefile.am/configure.ac/m4 macros have been refactored
  following standard GNU rules for those files, sometimes taking
  macros from the autoconf-archive on savannah.gnu.org

* SExtractor library (now in http://github.com/sfabbro/libsextractor),
  cfitsio (repacked version: http://github.com/sfabbro/cfitsio),
  Do a man pkg-config if you don't know anything about pkg-config.

* To build the autotools from scratch (Makefile, configure), use

     $ autoreconf -vi

* Do not force the optimization flags in the Makefile.am's or configure.ac
  (CFLAGS, CXXFLAGS, FFLAGS, LDFLAGS) unless you really know what you
  are doing. These flags are reserved for the user (who could use
  specific architecture flags). If you notice some bugs using
  optimization flags (the default is -g -O2), fix the code instead of
  forcing lower optimization, unless this is a gcc bug (gcc < 4.4 has
  a few corner cases, but I doubt you will encounter them).

  If you want to pass your flags (either optimization or debug), use
  the environment variables during configure time. Below an example to
  pass safe C++ optimization flags, standard C debug flags, and
  linking flags using as-needed feature of ld (obviously use consistent
  for all {C,F,FC,CXX}FLAGS, not like this example):
      
      $ ./configure CXXFLAGS="-O2 -march=native" \
      		    CFLAGS="-Wall -g" LDFLAGS="-Wl,--as-needed"

  This way "make" will pick up those configured flags on every call. You
  can overwrite the flags at compile stage, ex.:

      $ make CPPFLAGS="-DDEBUG" CXXFLAGS="-O0 -ggdb"

* One way to build your stuff for multiple architectures:

      $ tar xf poloka-0.7.0.tar.gz
      $ mkdir poloka-build-x86
      $ cd poloka-build-x86
      $ ../poloka-0.7.0/configure --libdir=${HOME}/lib32 --bindir=${HOME}/bin32
      $ make -j <ncpu> && make install

* Rolling a poloka release

  0) choose and select a release number <x.y.z> in configure.ac
  1) tag the commit (git tag)
  2) autoreconf -i && ./configure && make dist
  3) scp poloka-<x.y.z>.tar.gz <poloka-web-site>:
  4) email friends

* Cleaning up. To remove all the autotools generated files:

     $ make maintainer-clean
